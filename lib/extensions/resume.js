"use strict";
var debug = require('debug')('ratatoskr:resume');
function resume(_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.ping, ping = _c === void 0 ? 10 * 1000 : _c, _d = _b.retry, retry = _d === void 0 ? 5 : _d;
    return function (client) {
        var prevAckAt, thisAckAt;
        var pingTimeout;
        var resumeTimeout;
        var resumeAttempts = 0;
        function doPing() {
            var msg = {};
            client.emit('resume:ping', msg);
            debug('ping=', msg);
            client.sendPing({}).then(function (ack) {
                debug('pong=', ack);
                prevAckAt = thisAckAt, thisAckAt = Date.now();
                client.emit('resume:pong', ack);
                client.emit('resume:tick', thisAckAt - prevAckAt, thisAckAt, prevAckAt);
                pingTimeout = setTimeout(function () { return doPing(); }, ping);
            }, function (err) {
                debug('error=', err);
                if (resumeAttempts === 0) {
                    client.disconnect(new Error('pong'));
                }
            });
        }
        function doResume() {
            resumeAttempts++;
            if (retry > -1 && resumeAttempts > retry) {
                debug('quit');
                client.emit('resume:quit');
                return;
            }
            debug('attempt=', resumeAttempts);
            var resumeDelay = (Math.max(0, (4 * Math.pow(resumeAttempts, 2)) - (5 * resumeAttempts) + 4)) * 1000;
            client.emit('resume', resumeDelay, resumeAttempts);
            clearTimeout(resumeTimeout), resumeTimeout = null;
            resumeTimeout = setTimeout(function () { return client.connect(); }, resumeDelay);
        }
        client.on('authenticated', function () {
            debug('authenticated');
            prevAckAt = thisAckAt || Date.now(), thisAckAt = Date.now();
            client.emit('resume:tick', thisAckAt - prevAckAt, thisAckAt, prevAckAt);
            pingTimeout = setTimeout(function () { return doPing(); }, ping);
            resumeAttempts = 0;
        });
        client.on('disconnected', function (reason) {
            debug('disconnected reason=', reason);
            clearTimeout(pingTimeout), pingTimeout = null;
            if (reason === client) {
                debug('stop');
                clearTimeout(resumeTimeout), resumeTimeout = null;
                if (resumeAttempts > 0) {
                    client.emit('resume:stop');
                }
                resumeAttempts = 0;
                return;
            }
            doResume();
        });
    };
}
exports.resume = resume;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4dGVuc2lvbnMvcmVzdW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQSxJQUFNLEtBQUssR0FBaUIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFPakUsZ0JBQXVCLEVBQWlEO1FBQWpELDRCQUFpRCxFQUFoRCxZQUFnQixFQUFoQixxQ0FBZ0IsRUFBRSxhQUFTLEVBQVQsOEJBQVM7SUFDL0MsTUFBTSxDQUFDLFVBQUMsTUFBYztRQUNsQixJQUFJLFNBQWlCLEVBQUUsU0FBaUIsQ0FBQztRQUN6QyxJQUFJLFdBQWdCLENBQUM7UUFDckIsSUFBSSxhQUFrQixDQUFDO1FBQ3ZCLElBQUksY0FBYyxHQUFXLENBQUMsQ0FBQztRQUUvQjtZQUNJLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztZQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBRWhDLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFFcEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxHQUFHO2dCQUN6QixLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUVwQixTQUFTLEdBQUcsU0FBUyxFQUFFLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxTQUFTLEdBQUcsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDeEUsV0FBVyxHQUFHLFVBQVUsQ0FBQyxjQUFNLE9BQUEsTUFBTSxFQUFFLEVBQVIsQ0FBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ25ELENBQUMsRUFBRSxVQUFDLEdBQUc7Z0JBQ0gsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFLckIsRUFBRSxDQUFDLENBQUMsY0FBYyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3ZCLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDekMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUVEO1lBQ0ksY0FBYyxFQUFFLENBQUM7WUFFakIsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLGNBQWMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRWQsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDM0IsTUFBTSxDQUFDO1lBQ1gsQ0FBQztZQUVELEtBQUssQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7WUFFbEMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBRXJHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUVuRCxZQUFZLENBQUMsYUFBYSxDQUFDLEVBQUUsYUFBYSxHQUFHLElBQUksQ0FBQztZQUVsRCxhQUFhLEdBQUcsVUFBVSxDQUFDLGNBQU0sT0FBQSxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQWhCLENBQWdCLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDcEUsQ0FBQztRQUVELE1BQU0sQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFO1lBQ3ZCLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUV2QixTQUFTLEdBQUcsU0FBUyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQzVELE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFNBQVMsR0FBRyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ3hFLFdBQVcsR0FBRyxVQUFVLENBQUMsY0FBTSxPQUFBLE1BQU0sRUFBRSxFQUFSLENBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMvQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsVUFBQyxNQUFNO1lBQzdCLEtBQUssQ0FBQyxzQkFBc0IsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUV0QyxZQUFZLENBQUMsV0FBVyxDQUFDLEVBQUUsV0FBVyxHQUFHLElBQUksQ0FBQztZQUU5QyxFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDcEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUdkLFlBQVksQ0FBQyxhQUFhLENBQUMsRUFBRSxhQUFhLEdBQUcsSUFBSSxDQUFDO2dCQUNsRCxFQUFFLENBQUMsQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDL0IsQ0FBQztnQkFDRCxjQUFjLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixNQUFNLENBQUM7WUFDWCxDQUFDO1lBRUQsUUFBUSxFQUFFLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztBQUNOLENBQUM7QUFsRmUsY0FBTSxTQWtGckIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cblxuaW1wb3J0IHtDbGllbnR9IGZyb20gJy4uL2NsaWVudCc7XG5cbmNvbnN0IGRlYnVnOiBEZWJ1Zy5Mb2dnZXIgPSByZXF1aXJlKCdkZWJ1ZycpKCdyYXRhdG9za3I6cmVzdW1lJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzdW1lT3B0aW9ucyB7XG4gICAgcGluZz86IG51bWJlcjtcbiAgICByZXRyeT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc3VtZSh7cGluZyA9IDEwICogMTAwMCwgcmV0cnkgPSA1fTogUmVzdW1lT3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIChjbGllbnQ6IENsaWVudCkgPT4ge1xuICAgICAgICB2YXIgcHJldkFja0F0OiBudW1iZXIsIHRoaXNBY2tBdDogbnVtYmVyO1xuICAgICAgICB2YXIgcGluZ1RpbWVvdXQ6IGFueTtcbiAgICAgICAgdmFyIHJlc3VtZVRpbWVvdXQ6IGFueTtcbiAgICAgICAgdmFyIHJlc3VtZUF0dGVtcHRzOiBudW1iZXIgPSAwO1xuXG4gICAgICAgIGZ1bmN0aW9uIGRvUGluZygpIHtcbiAgICAgICAgICAgIHZhciBtc2cgPSB7fTtcbiAgICAgICAgICAgIGNsaWVudC5lbWl0KCdyZXN1bWU6cGluZycsIG1zZyk7XG5cbiAgICAgICAgICAgIGRlYnVnKCdwaW5nPScsIG1zZyk7XG5cbiAgICAgICAgICAgIGNsaWVudC5zZW5kUGluZyh7fSkudGhlbigoYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVidWcoJ3Bvbmc9JywgYWNrKTtcblxuICAgICAgICAgICAgICAgIHByZXZBY2tBdCA9IHRoaXNBY2tBdCwgdGhpc0Fja0F0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICBjbGllbnQuZW1pdCgncmVzdW1lOnBvbmcnLCBhY2spO1xuICAgICAgICAgICAgICAgIGNsaWVudC5lbWl0KCdyZXN1bWU6dGljaycsIHRoaXNBY2tBdCAtIHByZXZBY2tBdCwgdGhpc0Fja0F0LCBwcmV2QWNrQXQpO1xuICAgICAgICAgICAgICAgIHBpbmdUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBkb1BpbmcoKSwgcGluZyk7XG4gICAgICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVidWcoJ2Vycm9yPScsIGVycik7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgc29ja2V0IGlzIGNsb3NlZCwgaXQgd2lsbCB0cmlnZ2VyIGEgYGRpc2Nvbm5lY3RlZGAgZXZlbnQsIHdoaWNoIHdpbGwgaW4gdHVybiB0cmlnZ2VyIGBkb1Jlc3VtZWAsIGFuZCB0aGVuIGFueSBtZXNzYWdlc1xuICAgICAgICAgICAgICAgIC8vIGF3YWl0aW5nIGFja25vd2xlZGdlbWVudCB3aWxsIGJlIHJlamVjdGVkLiAgSW4gdGhpcyBvcmRlciBvZiBldmVudHMsIHRoZSByZXN1bWUgcHJvY2VzcyBoYXMgYWxyZWFkeSBiZWd1biwgc28gd2UgZG8gbm90IHdhbnQgdG9cbiAgICAgICAgICAgICAgICAvLyBkaXNjb25uZWN0IGhlcmUuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VtZUF0dGVtcHRzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWVudC5kaXNjb25uZWN0KG5ldyBFcnJvcigncG9uZycpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRvUmVzdW1lKCkge1xuICAgICAgICAgICAgcmVzdW1lQXR0ZW1wdHMrKztcblxuICAgICAgICAgICAgaWYgKHJldHJ5ID4gLTEgJiYgcmVzdW1lQXR0ZW1wdHMgPiByZXRyeSkge1xuICAgICAgICAgICAgICAgIGRlYnVnKCdxdWl0Jyk7XG5cbiAgICAgICAgICAgICAgICBjbGllbnQuZW1pdCgncmVzdW1lOnF1aXQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlYnVnKCdhdHRlbXB0PScsIHJlc3VtZUF0dGVtcHRzKTtcblxuICAgICAgICAgICAgdmFyIHJlc3VtZURlbGF5ID0gKE1hdGgubWF4KDAsICg0ICogTWF0aC5wb3cocmVzdW1lQXR0ZW1wdHMsIDIpKSAtICg1ICogcmVzdW1lQXR0ZW1wdHMpICsgNCkpICogMTAwMDsgLy8gM3MsIDEwcywgMjVzLCA0OHMsIGV0Y1xuXG4gICAgICAgICAgICBjbGllbnQuZW1pdCgncmVzdW1lJywgcmVzdW1lRGVsYXksIHJlc3VtZUF0dGVtcHRzKTtcblxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHJlc3VtZVRpbWVvdXQpLCByZXN1bWVUaW1lb3V0ID0gbnVsbDtcblxuICAgICAgICAgICAgcmVzdW1lVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gY2xpZW50LmNvbm5lY3QoKSwgcmVzdW1lRGVsYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xpZW50Lm9uKCdhdXRoZW50aWNhdGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgZGVidWcoJ2F1dGhlbnRpY2F0ZWQnKTtcblxuICAgICAgICAgICAgcHJldkFja0F0ID0gdGhpc0Fja0F0IHx8IERhdGUubm93KCksIHRoaXNBY2tBdCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBjbGllbnQuZW1pdCgncmVzdW1lOnRpY2snLCB0aGlzQWNrQXQgLSBwcmV2QWNrQXQsIHRoaXNBY2tBdCwgcHJldkFja0F0KTtcbiAgICAgICAgICAgIHBpbmdUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBkb1BpbmcoKSwgcGluZyk7XG4gICAgICAgICAgICByZXN1bWVBdHRlbXB0cyA9IDA7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNsaWVudC5vbignZGlzY29ubmVjdGVkJywgKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgZGVidWcoJ2Rpc2Nvbm5lY3RlZCByZWFzb249JywgcmVhc29uKTtcblxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHBpbmdUaW1lb3V0KSwgcGluZ1RpbWVvdXQgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAocmVhc29uID09PSBjbGllbnQpIHtcbiAgICAgICAgICAgICAgICBkZWJ1Zygnc3RvcCcpO1xuXG4gICAgICAgICAgICAgICAgLy8gZGlzY29ubmVjdCB3YXMgY2FsbGVkIGRpcmVjdGx5LCBkbyBub3QgcmVzdW1lLCBjYW5jZWwgb3V0c3RhbmRpbmdcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQocmVzdW1lVGltZW91dCksIHJlc3VtZVRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bWVBdHRlbXB0cyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50LmVtaXQoJ3Jlc3VtZTpzdG9wJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VtZUF0dGVtcHRzID0gMDtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvUmVzdW1lKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG4iXX0=