"use strict";
var debug = require('debug')('ratatoskr:resume');
var RESUME_STEPS = [200, 1 * 1000, 5 * 1000, 10 * 1000, 30 * 1000, 60 * 1000];
function resume(_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.ping, ping = _c === void 0 ? 10 * 1000 : _c, _d = _b.retry, retry = _d === void 0 ? 6 : _d, _e = _b.steps, steps = _e === void 0 ? RESUME_STEPS : _e;
    return function (client) {
        var prevAckAt, thisAckAt;
        var pingTimeout;
        var resumeTimeout;
        var resumeAttempts = 0;
        function doPing() {
            var msg = {};
            client.emit('resume:ping', msg);
            debug('ping=', msg);
            client.sendPing().then(function (ack) {
                debug('pong=', ack);
                prevAckAt = thisAckAt, thisAckAt = Date.now();
                client.emit('resume:pong', ack);
                client.emit('resume:tick', thisAckAt - prevAckAt, thisAckAt, prevAckAt);
                pingTimeout = setTimeout(function () { return doPing(); }, ping);
            }, function (err) {
                debug('error=', err);
                if (resumeAttempts === 0) {
                    client.disconnect(new Error('pong'));
                }
            });
        }
        function doResume() {
            resumeAttempts++;
            if (retry > -1 && resumeAttempts > retry) {
                debug('quit');
                client.emit('resume:quit');
                return;
            }
            var resumeDelay = steps[Math.min(resumeAttempts, steps.length) - 1];
            debug('attempt=', resumeAttempts, resumeDelay);
            client.emit('resume', resumeDelay, resumeAttempts);
            clearTimeout(resumeTimeout), resumeTimeout = null;
            resumeTimeout = setTimeout(function () { return client.connect(); }, resumeDelay);
        }
        client.on('authenticated', function () {
            debug('authenticated');
            prevAckAt = thisAckAt || Date.now(), thisAckAt = Date.now();
            client.emit('resume:tick', thisAckAt - prevAckAt, thisAckAt, prevAckAt);
            pingTimeout = setTimeout(function () { return doPing(); }, ping);
            resumeAttempts = 0;
        });
        client.on('disconnected', function (reason) {
            debug('disconnected reason=', reason);
            clearTimeout(pingTimeout), pingTimeout = null;
            if (reason === client) {
                debug('stop');
                clearTimeout(resumeTimeout), resumeTimeout = null;
                if (resumeAttempts > 0) {
                    client.emit('resume:stop');
                }
                resumeAttempts = 0;
                return;
            }
            doResume();
        });
    };
}
exports.resume = resume;
//# sourceMappingURL=data:application/json;base64,